lui $gp,1001
addiu $a0, $zero, 0x5
sw $a0, 0($gp)
addiu $a0, $zero, 0x3
sw $a0, 4($gp)
addiu $a0, $zero, 0x6
sw $a0, 8($gp)
addiu $a0, $zero, 0x8
sw $a0, 12($gp)
addiu $a0, $zero, 0x9
sw $a0, 16($gp)
addiu $a0, $zero, 0x1
sw $a0, 20($gp)
addiu $a0, $zero, 0x4
sw $a0, 24($gp)
addiu $a0, $zero, 0x7
sw $a0, 28($gp)
addiu $a0, $zero, 0x2
sw $a0, 32($gp)
addiu $a0, $zero, 0xa
sw $a0, 36($gp)
addiu $t0,$zero, 0		#load 0 into i
addiu $t1,$zero, 0xA		#load 10 into n
addiu $t3,$gp,0		#load base of data memory into t3  
andi $a0,$a0,0		
bne $t0,$zero,4		#go to compare
addiu $t0,$zero,1		#add to index if we are at start of array
andi $a0,$a0,0		#clear the registers (this is where compare starts)
andi $a1,$a1,0
andi $a2,$a2,0
addiu $t2,$t0,-1		#i-1 into t2
andi $t4,$t4,0		#clear t4
addiu $t4,$t2,0		#load i-1 into t4
sll $t4,$t4,2		#multiply t4 by 4
addu $t4,$t3,$t4		#add offset to get effective address
lw $a1,0($t4)		#load memory at effective address, a1 contains arry[i-1]
andi $t5,$t5,0 		#clear t4
addiu $t5,$t0,0		#load i into t5
sll $t5,$t5,2		#multiply t5 by 4
addu $t5,$t3,$t5		#effective address
lw $a0,0($t5)		#load memory, a0 contains arry[i]
subu $a3,$a0,$a1		#check to see which is bigger
bgtz $a3,14		#jump to increase index, elements in the right order
sw $a0,0($t4)		#swap!
sw $a1,0($t5)		#swap!
subu $t0,$t0,1		#decrement index
j -54			#back to check for zero index (jumps back up to 27)
addiu $t0,$t0,1		#increment index (this is where bgtz branches to)
bne $t0,$t1,-5C		#checks to see if at the end of the array
andi $v0,$v0,0		#exits the program
addiu $v0,$v0,0xA
syscall